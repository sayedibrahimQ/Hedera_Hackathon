from hedera import (
    TokenId,
    TransferTransaction,
    TokenCreateTransaction,
    TokenType,
    TokenSupplyType,
    PrivateKey,
    TokenMintTransaction,
    TokenBurnTransaction
)

from nilefi.apps.blockchain.hedera_client import client
from nilefi.apps.blockchain.constants import OFD_TOKEN_ID, TREASURY_ACCOUNT_ID, TREASURY_PRIVATE_KEY

def tokenize_real_estate_asset(asset_id, token_name, token_symbol):
    """Tokenizes a real estate asset as an NFT on the Hedera network."""
    create_tx = TokenCreateTransaction() \
        .setTokenName(token_name) \
        .setTokenSymbol(token_symbol) \
        .setTokenType(TokenType.NON_FUNGIBLE_UNIQUE) \
        .setDecimals(0) \
        .setInitialSupply(0) \
        .setTreasuryAccountId(TREASURY_ACCOUNT_ID) \
        .setSupplyType(TokenSupplyType.FINITE) \
        .setMaxSupply(1) \
        .setAdminKey(PrivateKey.fromString(TREASURY_PRIVATE_KEY).getPublicKey()) \
        .setSupplyKey(PrivateKey.fromString(TREASURY_PRIVATE_KEY).getPublicKey()) \
        .freezeWith(client)

    signed_tx = create_tx.sign(PrivateKey.fromString(TREASURY_PRIVATE_KEY))
    response = signed_tx.execute(client)
    receipt = response.getReceipt(client)
    token_id = receipt.tokenId
    return token_id

def setup_rental_agreement(tenant_id, landlord_id, rent_amount):
    """Placeholder for creating a rental agreement."""
    return "12345"

def transfer_ofd_token(sender_account_id, receiver_account_id, amount):
    """Transfers OFD tokens from one account to another."""
    tx = (
        TransferTransaction()
        .addTokenTransfer(TokenId.fromString(OFD_TOKEN_ID), sender_account_id, -amount)
        .addTokenTransfer(TokenId.fromString(OFD_TOKEN_ID), receiver_account_id, amount)
        .freezeWith(client)
    )
    
    # The sender must sign the transaction
    # In a real app, you would get the sender's private key from a secure vault
    # For this example, we'll assume the treasury is the sender
    signed_tx = tx.sign(PrivateKey.fromString(TREASURY_PRIVATE_KEY))
    response = signed_tx.execute(client)

    return response.getReceipt(client)

def mint_ofd_tokens(account_id, amount):
    """Mints new OFD tokens."""
    tx = (
        TokenMintTransaction()
        .setTokenId(TokenId.fromString(OFD_TOKEN_ID))
        .setAmount(amount)
        .freezeWith(client)
    )

    signed_tx = tx.sign(PrivateKey.fromString(TREASURY_PRIVATE_KEY))
    response = signed_tx.execute(client)
    return response.getReceipt(client)

def burn_ofd_tokens(account_id, amount):
    """Burns OFD tokens."""
    tx = (
        TokenBurnTransaction()
        .setTokenId(TokenId.fromString(OFD_TOKEN_ID))
        .setAmount(amount)
        .freezeWith(client)
    )

    signed_tx = tx.sign(PrivateKey.fromString(TREASURY_PRIVATE_KEY))
    response = signed_tx.execute(client)
    return response.getReceipt(client)
